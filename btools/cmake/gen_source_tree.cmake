
message(STATUS "Generating project ...")
message(STATUS "Including ${SOURCES_ROOT_PATH}/include")
message(STATUS "Adding sources to ${PROJECT_ROOT_PATH} ..." )

include_directories("${SOURCES_ROOT_PATH}/include")
#add_subdirectory("${SOURCES_ROOT_PATH}/include" include)
include_directories("${SOURCES_ROOT_PATH}/sources")
#add_subdirectory("${SOURCES_ROOT_PATH}/sources" sources)

macro( create_sources )
	set( tree "${ARGN}" )
	math( EXPR pos "${ARGC} - 1" )
	list( GET tree ${pos} pre )
	list( REMOVE_AT tree ${pos} )
	math( EXPR pos "${ARGC} - 2" )
	list( GET tree ${pos} subs )
	list( REMOVE_AT tree ${pos} )

	set( groups "" )
	foreach( file ${tree} )
		string( REGEX MATCHALL .+/ path ${file} )
		list( FIND groups ${path} found )
		if(found LESS 0)
			list( APPEND groups ${path} )
		endif()
	endforeach()

	foreach( group ${groups} )
		set( group_files "" )
		foreach( file ${tree} )
			string( REGEX MATCHALL .+/ path ${file} )
			if( "${path}" STREQUAL "${group}" )
				list( APPEND group_files ${file} )
			endif()
		endforeach()

		string( LENGTH "${group}" size )
		math( EXPR pos "${size} - 1" )
		string( SUBSTRING "${group}" 0 ${pos} clear_group )
		string( REPLACE ${subs} ${pre} clear_group ${clear_group} )
		string( REPLACE / \\ group_name ${clear_group} )
		source_group( ${group_name} FILES ${group_files} )
	endforeach()
endmacro()

unset(h_header_files)
unset(hpp_header_files)
unset(h_source_files)
unset(hpp_source_files)
unset(c_source_files)
unset(cpp_source_files)
unset(mm_source_files)
unset(m_source_files)

file( GLOB_RECURSE current_files RELATIVE ${PROJECT_ROOT_PATH} ${SOURCES_ROOT_PATH}/include/*.h )
list( APPEND h_header_files "${current_files}" )
file( GLOB_RECURSE current_files RELATIVE ${PROJECT_ROOT_PATH} ${SOURCES_ROOT_PATH}/include/*.hpp )
list( APPEND hpp_header_files "${current_files}" )
file( GLOB_RECURSE current_files RELATIVE ${PROJECT_ROOT_PATH} ${SOURCES_ROOT_PATH}/sources/*.h )
list( APPEND h_source_files "${current_files}" )
file( GLOB_RECURSE current_files RELATIVE ${PROJECT_ROOT_PATH} ${SOURCES_ROOT_PATH}/sources/*.hpp )
list( APPEND hpp_source_files "${current_files}" )
file( GLOB_RECURSE current_files RELATIVE ${PROJECT_ROOT_PATH} ${SOURCES_ROOT_PATH}/sources/*.c )
list( APPEND c_source_files "${current_files}" )
file( GLOB_RECURSE current_files RELATIVE ${PROJECT_ROOT_PATH} ${SOURCES_ROOT_PATH}/sources/*.cpp )
list( APPEND cpp_source_files "${current_files}" )
if( APPLE )
	file( GLOB_RECURSE current_files RELATIVE ${PROJECT_ROOT_PATH} ${SOURCES_ROOT_PATH}/sources/*.m )
	list( APPEND m_source_files "${current_files}" )
	file( GLOB_RECURSE current_files RELATIVE ${PROJECT_ROOT_PATH} ${SOURCES_ROOT_PATH}/sources/*.mm )
	list( APPEND mm_source_files "${current_files}" )
endif()

set( project_headers CACHE INTERNAL "header files" FORCE )
set( project_headers ${h_header_files} ${hpp_header_files} CACHE INTERNAL "header files" )
create_sources( ${project_headers} ${USER_FRAMEWORK_OWNER_PATH}/include "include" )

set( project_sources CACHE INTERNAL "source files" FORCE )
set( project_sources ${h_source_files} ${hpp_source_files} ${c_source_files} ${cpp_source_files} ${mm_source_files}  ${m_source_files} CACHE INTERNAL "source files" )
create_sources( ${project_sources} ${SOURCES_ROOT_PATH}/sources "sources" )

